namespace Nancy.Authentication.OAuth
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Nancy.Bootstrapper;
    using Nancy.ModelBinding;
    using Nancy.Security;


    /*
     * RESOURCES
     *   - Specification http://tools.ietf.org/html/draft-ietf-oauth-v2-20
     *   - OAuth 2.0 @ Facebook.com http://www.sociallipstick.com/?p=239
     * 
     * 
     * NOTES
     *   - First you authorize
     *      - Pass in the members of IAuthorizationRequest as querystring parameters
     *      - Return to the redirecturi, by appending code and state, from IAuthorizationResponse, in the querystring
     *   - Then you request an access token once you are authorized
     *      - 
     *   - The token should be appended, using oauth_token querystring parameter, on each request to a restricted resource
     *   
     * 
     * 
     */
    
    public class OAuthModule : NancyModule
    {
        public OAuthModule() : base(OAuth.Configuration.Base)
        {
            Get[OAuth.Configuration.Authorization] = parameters => {

                Foo f = this.Bind();

                return "This is where you'd authorize";
            };
        }
    }

    public static class OAuth
    {
        public static OAuthConfiguration Configuration { get; private set; }

        public static void Enable(IApplicationPipelines applicationPipelines, OAuthConfiguration configuration)
        {
            Configuration = configuration;
        }
    }

    public class OAuthConfiguration
    {
        public string Base { get; set; }
        public string Authorization { get; set; }
    }

    public interface IClient
    {
        string Id { get; set; }
        IEnumerable<string> Redirects { get; set; }
        string Secret { get; set; }
    }

    public class Foo
    {
        public string ClientId { get; set; }
    }

public static class ResponseExtensions
{
    public static Response WithHeaders(this IResponseFormatter formatter, IDictionary<string, string> headers)
    {
        return new Response { Headers = headers };
    }
}

public class TestModule : NancyModule
{
    public TestModule()
    {
        Get["/"] = parameters => {
            return Response.WithHeaders(new Dictionary<string, string>()
            {
                { "Content-Type", "application/json"},
                { "Cache", "no-cache"}
            });
        };
    }
}

    public interface IAuthorizationRequest
    {
        string ResponseType { get; set; } // REQUIRED. Should always be set to "code" as per the RFC
        string ClientId { get; set; } // REQUIRED
        Uri RedirectUri { get; set; } // OPTIONAL
        string Scope { get; set; } // OPTIONAL. List of space-delimited, case sensitive strings
        string State { get; set; } // OPTIONAL. An opaque value used by the client to maintain state between the request and callback. 
    }

    public interface IAuthorizationResponse
    {
        string Code { get; set; } // REQUIRED. The authorization code generated by the authorization server.
        string State { get; set; } // REQUIRED if the "state" parameter was present in the client authorization request. 
    }

    public interface IAccessTokenRequest
    {
        string ClientId { get; set; } // REQUIRED.  The client identifier issued to the client during the registration process
        string ClientSecret { get; set; } // REQUIRED.  The client secret
        string GrantType { get; set; } // REQUIRED.  Value MUST be set to "authorization_code".
        string Code { get; set; } // REQUIRED. The authorization code generated by the authorization server.
        Uri RedirectUri { get; set; } // REQUIRED, if the "redirect_uri" parameter was included in the authorization request
    }

    public interface IAccessTokenResponse
    {
        string AccessToken { get; set; } // REQUIRED.  The access token issued by the authorization server.
        string TokenType { get; set; } //  REQUIRED.  The type of the token issued
        int ExpiresIn { get; set; } // OPTIONAL.  The lifetime in seconds of the access token.
        string RefeshToken { get; set; } // OPTIONAL.  The refresh token which can be used to obtain new access tokens using the same authorization grant
        string Scope { get; set; } // OPTIONAL. List of space-delimited, case sensitive strings
    }

    public interface IAccessTokenProvider
    {
        string GenerateAccessToken();
    }

    public enum ErrorResponse
    {
    }

    public enum GrantType
    {
    }

    public enum TokenType
    {
    }
}
